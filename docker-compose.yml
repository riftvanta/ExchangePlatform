version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    container_name: usdt_jod_db
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-usdt_jod_exchange}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-usdt_jod_exchange}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app_network
    restart: unless-stopped

  # Backend Server
  server:
    container_name: usdt_jod_server
    build:
      context: .
      dockerfile: server.Dockerfile
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-usdt_jod_exchange}
      - SESSION_SECRET=${SESSION_SECRET:-default_dev_secret_change_in_production}
      - TRON_NETWORK_URL=${TRON_NETWORK_URL:-https://api.trongrid.io}
      - USE_AWS_HSM=${USE_AWS_HSM:-false}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-usdt-jod-uploads}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    volumes:
      - ./server:/app/server
      - ./shared:/app/shared
      - ./types:/app/types
      - node_modules_server:/app/node_modules
    networks:
      - app_network
    restart: unless-stopped

  # Frontend Client
  client:
    container_name: usdt_jod_client
    build:
      context: .
      dockerfile: client.Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - server
    environment:
      - VITE_API_URL=http://server:5000
    volumes:
      - ./client:/app/client
      - node_modules_client:/app/client/node_modules
    networks:
      - app_network
    restart: unless-stopped

volumes:
  postgres_data:
  node_modules_server:
  node_modules_client:

networks:
  app_network:
    driver: bridge
